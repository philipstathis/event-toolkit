service: serverless-rest-api-ps-v2

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    OFFICER_TABLE: officer-list-${opt:stage, self:provider.stage}
    ZOOM_ATTENDEE_TABLE: zoom-attendees-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ''
          -
            - 'arn:aws:ssm:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':parameter/eventbrite/live'
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ''
          -
            - 'arn:aws:ssm:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':parameter/zoom/*'

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: false

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  list-events:
    handler: todos/events.list
    events:
      - http:
          path: events
          method: get
          cors: false

  list-clubs:
    handler: passthrough/clubs.list
    events:
      - http:
          path: clubs
          method: get
          cors: false

  list-attendees-by-event:
    handler: todos/events.get
    events:
      - http:
          path: events/{id}
          method: get
          cors: false

  list-zoom-registrations-by-event:
    handler: todos/zoom-registrations.get
    events:
      - http:
          path: zoom-registrations/{id}
          method: get
          cors: false
    timeout: 30

  list-officer-attendees:
    handler: todos/list-officer-attendees.list
    events:
      - http:
          path: list-officer-attendees
          method: get
          cors: false
    timeout: 30

  list-current-officers:
    handler: todos/list-current-officers.list
    events:
      - http:
          path: list-current-officers
          method: get
          cors: false
    timeout: 30

  list-district-data:
    handler: todos/toastmasters.list
    events:
      - http:
          path: list-district-data
          method: get
          cors: false
    timeout: 30

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    OfficerDataDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.OFFICER_TABLE}
    ZoomAttendeeDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ZOOM_ATTENDEE_TABLE}
